/*
 * Copyright (C) 2017-2019  Christopher J. Howard
 *
 * This file is part of Emergent.
 *
 * Emergent is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Emergent is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Emergent.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef EMERGENT_INPUT_MAPPER_HPP
#define EMERGENT_INPUT_MAPPER_HPP

#include <emergent/input/input-event.hpp>
#include <emergent/input/input-mapping.hpp>
#include <emergent/utility/event-handler.hpp>
#include <functional>

namespace Emergent
{

class EventDispatcher;

/**
 * An input mapper takes a control and listens to input events then generates corresponding input mappings which can be added to an input router.
 *
 * @ingroup input
 */
class InputMapper:
	private EventHandler<KeyPressedEvent>,
	private EventHandler<MouseMovedEvent>,
	private EventHandler<MouseButtonPressedEvent>,
	private EventHandler<MouseWheelScrolledEvent>,
	private EventHandler<GamepadButtonPressedEvent>,
	private EventHandler<GamepadAxisMovedEvent>
{
public:
	/**
	 * Creates an input mapper.
	 *
	 * @param eventDispatcher Event dispatcher to which this input mapper will subscribe itself.
	 */
	InputMapper(EventDispatcher* eventDispatcher);

	/**
	 * Destroys an input mapper.
	 */
	virtual ~InputMapper();

	/**
	 * Sets the control for which input mappings will be generated.
	 *
	 * @param control Control for which input mappings will be generated.
	 */
	void setControl(Control* control);

	/**
	 * Sets the callback function to the input mappings generated by this input mapper.
	 *
	 * @param callback Callback function operates on an input mapping.
	 */
	void setCallback(std::function<void(const InputMapping&)> callback);

	/**
	 * Enables or disables the input mapping generation.
	 *
	 * @param enabled Whether to enable input mapping generation or not.
	 */
	void setEnabled(bool enabled);

	/**
	 * Returns true if input mapping generation is enabled.
	 */
	bool isEnabled() const;
	
private:
	virtual void handleEvent(const KeyPressedEvent& event);
	virtual void handleEvent(const MouseMovedEvent& event);
	virtual void handleEvent(const MouseButtonPressedEvent& event);
	virtual void handleEvent(const MouseWheelScrolledEvent& event);
	virtual void handleEvent(const GamepadButtonPressedEvent& event);
	virtual void handleEvent(const GamepadAxisMovedEvent& event);

	EventDispatcher* eventDispatcher;
	Control* control;
	std::function<void(const InputMapping&)> callback;
	bool enabled;
};

inline bool InputMapper::isEnabled() const
{
	return enabled;
}

} // namespace Emergent

#endif // EMERGENT_INPUT_MAPPER_HPP

