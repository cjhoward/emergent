cmake_minimum_required(VERSION 3.7)
project(emergent-superbuild)
include(${CMAKE_ROOT}/Modules/ExternalProject.cmake)

option(BUILD_DOCS "Build the API reference docs." OFF)
option(BUILD_EXAMPLES "Build the example programs." ON)
option(BUILD_STATIC "Build a static version of the library." OFF)
if(BUILD_STATIC)
	set(BUILD_SHARED FALSE)
else()
	set(BUILD_SHARED TRUE)
endif(BUILD_STATIC)

set(EXTERNAL_PROJECT_SOURCE_DIR "${PROJECT_SOURCE_DIR}/projects")
set(EXTERNAL_PROJECT_BUILD_DIR "${PROJECT_BINARY_DIR}/projects")
set(EXTERNAL_PROJECT_INSTALL_DIR "${CMAKE_BINARY_DIR}/install")
if(WINDOWS)
	set(EXTERNAL_PROJECT_CONFIG_DIR "${EXTERNAL_PROJECT_INSTALL_DIR}/cmake")
else()
	set(EXTERNAL_PROJECT_CONFIG_DIR "${EXTERNAL_PROJECT_INSTALL_DIR}/lib/cmake")
endif()

# Build SDL2 project
ExternalProject_Add(project-SDL2
	SOURCE_DIR ${EXTERNAL_PROJECT_SOURCE_DIR}/SDL2
	CMAKE_ARGS
	"-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}"
	"-DCMAKE_INSTALL_PREFIX=${EXTERNAL_PROJECT_INSTALL_DIR}"
	"-DSDL_ATOMIC=OFF"
	"-DSDL_AUDIO=OFF"
	"-DSDL_CPUINFO=ON"
	"-DSDL_DLOPEN=OFF"
	"-DSDL_EVENTS=ON"
	"-DSDL_FILE=OFF"
	"-DSDL_FILESYSTEM=OFF"
	"-DSDL_HAPTIC=ON"
	"-DSDL_JOYSTICK=ON"
	"-DSDL_LOADSO=ON"
	"-DSDL_POWER=ON"
	"-DSDL_RENDER=OFF"
	"-DSDL_SHARED=${BUILD_SHARED}"
	"-DSDL_STATIC=${BUILD_STATIC}"
	"-DSDL_STATIC_PIC=OFF"
	"-DSDL_TEST=OFF"
	"-DSDL_THREADS=OFF"
	"-DSDL_TIMERS=OFF"
	"-DSDL_VIDEO=ON"
	BINARY_DIR ${EXTERNAL_PROJECT_BUILD_DIR}/SDL2
	INSTALL_DIR ${EXTERNAL_PROJECT_INSTALL_DIR})

# Build freetype project
ExternalProject_Add(project-freetype
	SOURCE_DIR ${EXTERNAL_PROJECT_SOURCE_DIR}/freetype
	CMAKE_ARGS
	"-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}"
	"-DCMAKE_INSTALL_PREFIX=${EXTERNAL_PROJECT_INSTALL_DIR}"
	"-DBUILD_SHARED_LIBS=OFF"
	BINARY_DIR ${EXTERNAL_PROJECT_BUILD_DIR}/freetype
	INSTALL_DIR ${EXTERNAL_PROJECT_INSTALL_DIR})

# Build emergent project
ExternalProject_Add(project-emergent
	DEPENDS project-freetype project-SDL2
	SOURCE_DIR ${EXTERNAL_PROJECT_SOURCE_DIR}/emergent
	CMAKE_ARGS
	"-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}"
	"-DCMAKE_INSTALL_PREFIX=${EXTERNAL_PROJECT_INSTALL_DIR}"
	"-DEMERGENT_SOURCE_DIR=${PROJECT_SOURCE_DIR}/.."
	"-Dfreetype_DIR=${EXTERNAL_PROJECT_INSTALL_DIR}"
	"-DSDL2_DIR=${EXTERNAL_PROJEC_INSTALL_DIR}"
	"-DBUILD_DOCS=${BUILD_DOCS}"
	"-DBUILD_EXAMPLES=${BUILD_EXAMPLES}"
	"-DBUILD_STATIC=${BUILD_STATIC}"
	BINARY_DIR ${EXTERNAL_PROJECT_BUILD_DIR}/emergent
	INSTALL_DIR ${EXTERNAL_PROJECT_INSTALL_DIR})

# Force rebuilds
ExternalProject_Add_Step(project-emergent forcebuild
	COMMAND ${CMAKE_COMMAND} -E echo_append ""
	DEPENDEES configure
	DEPENDERS build
	ALWAYS 1)

# Install projects
install(DIRECTORY "${EXTERNAL_PROJECT_INSTALL_DIR}/include" DESTINATION .)
install(DIRECTORY "${EXTERNAL_PROJECT_INSTALL_DIR}/lib" DESTINATION .)
install(DIRECTORY "${EXTERNAL_PROJECT_INSTALL_DIR}/share" DESTINATION .)
install(DIRECTORY "${EXTERNAL_PROJECT_INSTALL_DIR}/bin" DESTINATION .)

# Add clean target
add_custom_target(clean-build
	COMMAND git clean -fdX
	WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}/build"
)

